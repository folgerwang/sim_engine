#version 450
#extension GL_ARB_separate_shader_objects : enable
#include "global_definition.glsl.h"
#include "prt_core.glsl.h"

layout(push_constant) uniform ConemapUniformBufferObject {
    ConemapGenParams params;
};

const ivec2 g_dispatch_size =
    ivec2(kConemapGenDispatchX, kConemapGenDispatchY);
const ivec2 g_cache_block_size =
    ivec2(kConemapGenBlockCacheSizeX, kConemapGenBlockCacheSizeY);

layout(set = 0, binding = SRC_TEX_INDEX) uniform sampler2D src_img;
layout(set = 0, binding = SRC_TEX_INDEX_1, r32i) uniform readonly iimage2D src_img_1;
layout(set = 0, binding = SRC_TEX_INDEX_2, r32i) uniform readonly iimage2D src_img_2;
layout(set = 0, binding = DST_TEX_INDEX, rgba8) uniform image2D dst_img;

layout(local_size_x = kConemapGenDispatchX, local_size_y = kConemapGenDispatchY) in;
void main()
{
	// get index in global work group i.e x,y position
	ivec2 pixel_coords =
        ivec2(gl_GlobalInvocationID.xy);
	ivec2 global_pixel_coords =
        params.dst_block_offset + pixel_coords;

    // load current depth value from source image
    vec2 uv = (global_pixel_coords.xy + 0.5f) * params.inv_size;

    float inv_half_pi = 1.0f / (PI * 0.5f);
    vec4 conemap_info = vec4(
        atan(intBitsToFloat(imageLoad(src_img_1, pixel_coords).x)) * inv_half_pi,
        atan(intBitsToFloat(imageLoad(src_img_2, pixel_coords).x)) * inv_half_pi,
        texture(src_img, uv)[params.depth_channel],
        0.0f);

	// output to a specific pixel in the image.
	imageStore(dst_img, global_pixel_coords, conemap_info);
}