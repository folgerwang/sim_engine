#version 450
#extension GL_ARB_separate_shader_objects : enable
#include "global_definition.glsl.h"

layout(set = 0, binding = SRC_TEX_INDEX_0, rgba32f) uniform readonly image2D src_img_0;
layout(set = 0, binding = SRC_TEX_INDEX_1, rgba32f) uniform readonly image2D src_img_1;
layout(set = 0, binding = SRC_TEX_INDEX_2, rgba32f) uniform readonly image2D src_img_2;
layout(set = 0, binding = SRC_TEX_INDEX_3, rgba32f) uniform readonly image2D src_img_3;
layout(set = 0, binding = SRC_TEX_INDEX_4, rgba32f) uniform readonly image2D src_img_4;
layout(set = 0, binding = SRC_TEX_INDEX_5, rgba32f) uniform readonly image2D src_img_5;
layout(set = 0, binding = SRC_TEX_INDEX_6, r32f) uniform readonly image2D src_img_6;

layout(std430, set = 0, binding = SRC_BUFFER_INDEX) readonly buffer PrtMinmaxBuffer {
	PrtMinmaxInfo info;
};

layout(set = 0, binding = DST_TEX_INDEX, rgba32ui) uniform uimage2D dst_packed_img;

layout(local_size_x = 8, local_size_y = 8) in;
void main()
{
	// get index in global work group i.e x,y position
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID);

    vec4 coeffs[6];
    coeffs[0] = imageLoad(src_img_0, pixel_coords);
    coeffs[1] = imageLoad(src_img_1, pixel_coords);
    coeffs[2] = imageLoad(src_img_2, pixel_coords);
    coeffs[3] = imageLoad(src_img_3, pixel_coords);
    coeffs[4] = imageLoad(src_img_4, pixel_coords);
    coeffs[5] = imageLoad(src_img_5, pixel_coords);
    float coeffs_6 = imageLoad(src_img_6, pixel_coords).x;

    uvec4 coeff_packed[6];
    coeff_packed[0].x = uint((coeffs[0].x - info.prt_minmax[0].x) / info.prt_minmax[0].y * 255.0f);
    for (int i = 1; i < 24; i++) {
        coeff_packed[i/4][i%4] = uint((coeffs[i/4][i%4] - info.prt_minmax[i].x) / info.prt_minmax[i].y * 31.0f);
    }
    uint coeff_packed_6 = uint((coeffs_6 - info.prt_minmax[24].x) / info.prt_minmax[24].y * 31.0f);

    uvec4 coeff_pack;
    coeff_pack.x = coeff_packed[0].y | (coeff_packed[0].z << 5) | (coeff_packed[0].w << 10) | (coeff_packed[1].x << 15) | (coeff_packed[1].y << 20) | (coeff_packed[1].z << 25);
    coeff_pack.y = coeff_packed[1].w | (coeff_packed[2].x << 5) | (coeff_packed[2].y << 10) | (coeff_packed[2].z << 15) | (coeff_packed[2].w << 20) | (coeff_packed[3].x << 25);
    coeff_pack.z = coeff_packed[3].y | (coeff_packed[3].z << 5) | (coeff_packed[3].w << 10) | (coeff_packed[4].x << 15) | (coeff_packed[4].y << 20) | (coeff_packed[4].z << 25);
    coeff_pack.w = coeff_packed[4].w | (coeff_packed[5].x << 5) | (coeff_packed[5].y << 10) | (coeff_packed[5].z << 15) | (coeff_packed[5].w << 20) | (coeff_packed_6 << 25);

    coeff_pack.x |= (coeff_packed[0].x & 0x03) << 30;
    coeff_pack.y |= ((coeff_packed[0].x >> 2) & 0x03) << 30;
    coeff_pack.z |= ((coeff_packed[0].x >> 4) & 0x03) << 30;
    coeff_pack.w |= (coeff_packed[0].x >> 6) << 30;

    imageStore(dst_packed_img, pixel_coords, coeff_pack);
}