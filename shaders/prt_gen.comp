#version 450
#extension GL_ARB_separate_shader_objects : enable
#include "global_definition.glsl.h"
#include "prt_core.glsl.h"

layout(push_constant) uniform PrtUniformBufferObject {
    PrtGenParams params;
};

layout(set = 0, binding = SRC_TEX_INDEX) uniform sampler2D src_img;
layout(set = 0, binding = DST_TEX_INDEX, rgba32f) uniform image2D dst_img;

shared float s_coeffs_by_weight[kPrtThetaSampleCount][15];
shared float s_weights[kPrtThetaSampleCount];

float sampleRayMaxTangent(vec2 sample_uv, float cur_depth, float phi) {
    vec2 sample_ray = vec2(cos(phi), sin(phi));
    float max_t = getIntersection(sample_uv * 2.0f - 1.0f, sample_ray) * 0.5f;
    uint sample_count =
        max(uint(max_t * params.sample_rate * max(params.size.x, params.size.y)), 1);
    float step_t = max_t / sample_count;
    float t = step_t * 0.5f;
    float max_tan_angle = -1e20f;
    for (uint i = 0; i < sample_count; i++) {
        vec2 uv = sample_uv + sample_ray * t;
        float sample_depth = texture(src_img, uv)[params.depth_channel];
        float delta_depth = cur_depth - sample_depth;
        if (params.is_height_map == 1) {
			delta_depth *= -1.0f;
		};

        delta_depth -= params.shadow_noise_thread; // get rid of shadow noise due to heightmap noise.

        max_tan_angle = max(delta_depth * params.shadow_intensity / t, max_tan_angle);
        t += step_t;
    }

    return max_tan_angle;
}

layout(local_size_x = 32, local_size_y = 32) in;
void main()
{
    uint local_idx = gl_LocalInvocationIndex;
    const float step_theta = PI * 0.5f / kPrtThetaSampleCount;
    const float step_phi = 2.0f * PI / kPrtPhiSampleCount;
    if (local_idx < kPrtThetaSampleCount) {
        float theta = (local_idx + 0.5f) * step_theta;  // From 0 to pi / 2
        float coeffs[15];
	    fillPreCalculateCoeffs(coeffs, theta);
        float weight =
            (2.0f * PI * sin(theta) / kPrtPhiSampleCount) / step_theta;

        s_weights[local_idx] = weight;
        for (int i = 0; i < 15; i++) {
			s_coeffs_by_weight[local_idx][i] = coeffs[i] * weight;
		}
	}
    barrier();

    // calculate sum of weights and coeffs.
    uint mask = 0xffffffff;
    for (uint stride = 1; stride < kPrtThetaSampleCount; stride *= 2) {
        if ((local_idx & stride) != 0 && local_idx < kPrtThetaSampleCount) {
            uint prev_sum_idx = (local_idx & mask) - 1;
            for (int i = 0; i < 15; i++) {
				s_coeffs_by_weight[local_idx][i] += s_coeffs_by_weight[prev_sum_idx][i];
			}
			s_weights[local_idx] += s_weights[prev_sum_idx];
        }
        barrier();
        mask <<= 1;
    }

    float sum_visi[25];
    for (int s = 0; s < 25; s++) {
        sum_visi[s] = 0.0f;
    }

	// get index in global work group i.e x,y position
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

    uvec2 src_pixel_coords =
        params.block_offset + uvec2((pixel_coords + 0.5f) * params.pixel_sample_size);
    vec2 sample_uv =
        vec2(src_pixel_coords + 0.5f) * params.inv_size;
    float c_depth =
        texture(src_img, sample_uv)[params.depth_channel];

    float phi = 0.0f;
    for (int i = 0; i < kPrtPhiSampleCount; i++) {
        float max_tangent_angle = sampleRayMaxTangent(sample_uv, c_depth, phi);
        float reference_theta = PI * 0.5f - atan(max_tangent_angle);
        int reference_theta_idx = min(int(reference_theta / step_theta), kPrtThetaSampleCount - 1);
        float y_value[25];
        fillYVauleTablle(y_value, s_coeffs_by_weight[reference_theta_idx], phi);

        for (int s = 0; s < 25; s++) {
            sum_visi[s] += y_value[s];
        }
        phi += step_phi;
    }

    float inv_sum_weights =
        1.0f / (s_weights[kPrtThetaSampleCount-1] * kPrtPhiSampleCount);
    for (int s = 0; s < 25; s++) {
        sum_visi[s] = sum_visi[s] * inv_sum_weights;
    }

	// output to a specific pixel in the image.
    ivec2 dst_pixel_coords = ivec2(pixel_coords.x * 8, pixel_coords.y);
    imageStore(dst_img, dst_pixel_coords, vec4(sum_visi[1], sum_visi[2], sum_visi[3], sum_visi[4]));
    imageStore(dst_img, dst_pixel_coords + ivec2(1, 0), vec4(sum_visi[5], sum_visi[6], sum_visi[7], sum_visi[8]));
    imageStore(dst_img, dst_pixel_coords + ivec2(2, 0), vec4(sum_visi[9], sum_visi[10], sum_visi[11], sum_visi[12]));
    imageStore(dst_img, dst_pixel_coords + ivec2(3, 0), vec4(sum_visi[13], sum_visi[14], sum_visi[15], sum_visi[16]));
    imageStore(dst_img, dst_pixel_coords + ivec2(4, 0), vec4(sum_visi[17], sum_visi[18], sum_visi[19], sum_visi[20]));
    imageStore(dst_img, dst_pixel_coords + ivec2(5, 0), vec4(sum_visi[21], sum_visi[22], sum_visi[23], sum_visi[24]));
    imageStore(dst_img, dst_pixel_coords + ivec2(6, 0), vec4(sum_visi[0]));
}