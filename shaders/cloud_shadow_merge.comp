#version 450
#extension GL_ARB_separate_shader_objects : enable
#include "global_definition.glsl.h"
#include "weather_common.glsl.h"
#include "noise.glsl.h"
#include "functions.glsl.h"
#include "brdf.glsl.h"
#include "punctual.glsl.h"
#include "ibl.glsl.h"

layout(push_constant) uniform CloudLightingUniformBufferObject {
  CloudShadowParams params;
};

vec2 mirrorRepeat(vec2 src_coord, vec2 size) {
    vec2 scr_coord_mod = mod(src_coord, 2.0f * size);
    if (scr_coord_mod.x > size.x) {
        scr_coord_mod.x = 2.0f * size.x - scr_coord_mod.x;
    }
    if (scr_coord_mod.y > size.y) {
        scr_coord_mod.y = 2.0f * size.y - scr_coord_mod.y;
    }

    return scr_coord_mod;
}

vec2 repeat(vec2 src_coord, vec2 size) {
    return mod(src_coord + 1000.0f * size, size);
}

layout(set = 0, binding = DST_CLOUD_SHADOW_TEX_INDEX, r16f) uniform image3D dst_cloud_shadow;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main()
{
    uint new_z_idx_high = (gl_GlobalInvocationID.z >> params.layer_idx) << (params.layer_idx + 1);
    uint new_z_idx_low = (gl_GlobalInvocationID.z & ((1 << params.layer_idx) - 1));
    int new_z_idx = int(new_z_idx_high | new_z_idx_low);

    ivec3 pixel_coords = ivec3(gl_GlobalInvocationID.xy, new_z_idx);

    vec3 uvw = (pixel_coords + 0.5f) * params.inv_size;
	vec3 position_ws = uvwToWorldPosition(uvw);

    uint upper_z_idx = (((gl_GlobalInvocationID.z >> params.layer_idx) << 1) + 1) << params.layer_idx;

    float upper_uvw_z = (upper_z_idx + 0.5f) * params.inv_size.z;

    float upper_layer_height = getSampleToHeight(upper_uvw_z);

    float t = rsi_n(position_ws, params.sun_dir, upper_layer_height);

    vec3 upper_layer_position_ws = position_ws + params.sun_dir * t;
    vec3 upper_uvw = worldPositionToUvw(upper_layer_position_ws);

    vec2 upper_pixel_coord = mirrorRepeat(upper_uvw.xy * params.size.xy, params.size.xy);
    vec2 noise = hash23(vec3(upper_pixel_coord, upper_z_idx)); 
    vec2 upc_ratio = fract(noise + upper_pixel_coord);
    ivec2 upc = ivec2(upper_pixel_coord);

    float src_opaque_00 = imageLoad(dst_cloud_shadow, ivec3(upc, upper_z_idx)).x;
    float src_opaque_01 = imageLoad(dst_cloud_shadow, ivec3(upc+ivec2(1, 0), upper_z_idx)).x;
    float src_opaque_10 = imageLoad(dst_cloud_shadow, ivec3(upc+ivec2(0, 1), upper_z_idx)).x;
    float src_opaque_11 = imageLoad(dst_cloud_shadow, ivec3(upc+ivec2(1, 1), upper_z_idx)).x;

    float combined_light_pass = mix(mix(src_opaque_00, src_opaque_01, upc_ratio.x), mix(src_opaque_10, src_opaque_11, upc_ratio.x), upc_ratio.y);

    float src_light_pass = imageLoad(dst_cloud_shadow, pixel_coords).x;
    imageStore(dst_cloud_shadow, pixel_coords, vec4(src_light_pass * combined_light_pass));
}