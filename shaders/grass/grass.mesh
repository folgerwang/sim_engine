#version 460
#extension GL_EXT_mesh_shader : enable
#include "..\global_definition.glsl.h"
#include "..\terrain\tile_common.glsl.h"
#include "..\noise.glsl.h"

out gl_MeshPerVertexEXT {
    vec4  gl_Position;
} gl_MeshVerticesEXT[];

layout(push_constant) uniform TileUniformBufferObject {
    TileParams tile_params;
};

layout(std430, set = VIEW_PARAMS_SET, binding = VIEW_CAMERA_BUFFER_INDEX) readonly buffer CameraInfoBuffer {
	GameCameraInfo camera_info;
};

layout(set = TILE_PARAMS_SET, binding = ROCK_LAYER_BUFFER_INDEX) uniform sampler2D rock_layer;
layout(set = TILE_PARAMS_SET, binding = SOIL_WATER_LAYER_BUFFER_INDEX) uniform sampler2D soil_water_layer;

layout(location = 0) out VsPsData {
    vec2 tex_coord;
} out_data[];

layout(local_size_x = 16, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices=256, max_primitives=256) out;
void main()
{
    uint grass_idx = gl_GlobalInvocationID.x;
    uint local_idx = gl_LocalInvocationID.x;
    vec4 hash_values = clamp(hash43(vec3(tile_params.min, grass_idx)), 0.0f, 1.0f);

    const uint num_vertex = 16 * 16;
    const uint num_primitive = 16 * 14;
    SetMeshOutputsEXT(num_vertex, num_primitive);

    // tile world position.
    vec2 pos_xz_ws = tile_params.min + hash_values.xy * tile_params.range;

    // convert tile world position to uv coordinate.
    vec2 world_map_uv = (pos_xz_ws - tile_params.world_min) * tile_params.inv_world_range;

    float ground_height = texture(rock_layer, world_map_uv).x;
    vec2 soil_water_thickness = texture(soil_water_layer, world_map_uv).xy * SOIL_WATER_LAYER_MAX_THICKNESS;
    ground_height += soil_water_thickness.x;

    vec3 grass_root_pos = vec3(pos_xz_ws.x, ground_height, pos_xz_ws.y);

    float root_angle = hash_values.w * 2.0 * 3.1415926;
    float top_angle = root_angle + (hash_values.z * 2.0 - 1.0) * 3.1415926 * 0.5;

    vec2 vert_info[] = {
        vec2(0.034, 0.0f),
        vec2(0.05, 0.3f),
        vec2(0.06, 0.4f),
        vec2(0.064, 0.5f),
        vec2(0.06, 0.6f),
        vec2(0.05, 0.7f),
        vec2(0.02, 0.9f),
        vec2(0.002, 1.0f)
    };

    for (int i_vert = 0; i_vert < 8; i_vert++) {
        float angle = mix(root_angle, top_angle, vert_info[i_vert].y);
        vec2 sincos_xy = vec2(sin(angle), cos(angle));
        vec3 vert_ofs_0 = vec3(sincos_xy.x, 1.0f, sincos_xy.y) * vert_info[i_vert].xyx;
        vec3 vert_ofs_1 = vec3(-sincos_xy.x, 1.0f, -sincos_xy.y) * vert_info[i_vert].xyx;
        uint v_idx = local_idx * 16 + i_vert * 2;
        gl_MeshVerticesEXT[v_idx].gl_Position =
            camera_info.view_proj * vec4(grass_root_pos + vert_ofs_0, 1.0);
        out_data[v_idx].tex_coord = vec2(0.5 + vert_info[i_vert].x, vert_info[i_vert].y);
        gl_MeshVerticesEXT[v_idx+1].gl_Position =
            camera_info.view_proj * vec4(grass_root_pos + vert_ofs_1, 1.0);
        out_data[v_idx+1].tex_coord = vec2(0.5 - vert_info[i_vert].x, vert_info[i_vert].y);
    }

    for (int i_poly = 0; i_poly < 14; i_poly++) {
        gl_PrimitiveTriangleIndicesEXT[local_idx * 14 + i_poly] =
            uvec3(local_idx * 16 + i_poly,
                  local_idx * 16 + i_poly + 1,
                  local_idx * 16 + i_poly + 2);
    }
}
    