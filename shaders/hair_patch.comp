#version 450
#extension GL_ARB_separate_shader_objects : enable
#include "global_definition.glsl.h"
#include "functions.glsl.h"
#include "brdf.glsl.h"
#include "punctual.glsl.h"
#include "noise.glsl.h"

layout(std430, set = VIEW_PARAMS_SET, binding = VIEW_CAMERA_BUFFER_INDEX) readonly buffer CameraInfoBuffer {
	GameCameraInfo camera_info;
};

layout(push_constant) uniform HairPatchUniformBufferObject {
    PrtLightParams params;
};

const float s_num_hairs = 5;//200.0f;
const uint  s_num_layers = 10;
const float s_hair_oquacity = 6.0f;
const float s_hair_width = 0.1f;
const float s_inv_hair_width = 1.0f / s_hair_width;

layout(set = PBR_MATERIAL_PARAMS_SET, binding = DST_COLOR_TEX_INDEX, rgba16f) uniform image2D dst_color_img;
layout(set = PBR_MATERIAL_PARAMS_SET, binding = DST_WEIGHT_TEX_INDEX, r16f) uniform image2D dst_weight_img;

const uint c_hair_cache_count = (11 * 2 + kHairPatchDispatchX) * kHairPatchDispatchY;
shared vec4 s_hair_color[c_hair_cache_count];

layout(local_size_x = kHairPatchDispatchX, local_size_y = kHairPatchDispatchY) in;

void main() {
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = (vec2(pixel_coords) + vec2(0.5f)) * params.inv_buffer_size;

    vec3 vertex_position = vec3(uv.x * 2.0f - 1.0f, 0.0f, uv.y * 2.0f - 1.0f);
    vec3 v = normalize(camera_info.position.xyz - vertex_position);

    mat3 tangent_world_matrix =
        mat3(vec3(1, 0, 0), vec3(0, 0, 1), vec3(0, 1, 0));

    float accum_opacity = 1.0f;
    float accum_hair_color = 0.0f;
    float offset_dir = 1.0f;
    float hair_color = 0.8f;
    float sum_weight = 0.0f;
    for (int i = 0; i < s_num_layers && accum_opacity > 0.01f; ++i) {
        float weight = 1.0f;
        vec2 noise_value = hash21(i * 1.34f);
        float uv_start = uv.x * 1.1f - 0.05f;
        float uv_end = uv_start * (1.0f + (noise_value.x - 0.5f) * 0.1f);
        float cur_uv = mix(uv_start, uv_end, pow(uv.y, 1.5f));
        float hair_idx = cur_uv * s_num_hairs;
        float i_hair_idx = floor(hair_idx);
        float hair_length = 0.95f + hash12(vec2(i * 1.34f, i_hair_idx)) * 0.05f;
        float sin_theta = clamp((fract(hair_idx) - 0.5f) * s_inv_hair_width, -1.0f, 1.0f);
        float cos_theta = sqrt(1.0f - sin_theta * sin_theta);
        float cur_opacity = min(cos_theta * s_hair_oquacity, 1.0f);
        vec3 hair_normal = tangent_world_matrix * vec3(sin_theta, cos_theta, 0);
        if (cur_uv > 1.0f || cur_uv < 0.0f || uv.y > hair_length)
			cur_opacity = 0.0f;
        accum_hair_color += (accum_opacity * cur_opacity * hair_color * max(dot(-v, hair_normal), 0.0f)) * weight;
        accum_opacity *= (1.0f - cur_opacity);

        offset_dir *= -1.0f;
        sum_weight += weight;
	}

    vec4 final_hair_color = vec4(vec3(accum_hair_color), accum_opacity * sum_weight);
    imageStore(dst_color_img, pixel_coords, final_hair_color);
    imageStore(dst_weight_img, pixel_coords, vec4(sum_weight));
}