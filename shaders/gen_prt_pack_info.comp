#version 450
#extension GL_ARB_separate_shader_objects : enable
#include "global_definition.glsl.h"

layout(push_constant) uniform PrtUniformBufferObject {
    PrtPackParams params;
};

layout(set = 0, binding = SRC_TEX_INDEX, rgba32f) uniform readonly image2D src_img;
layout(set = 0, binding = DST_TEX_INDEX, rgba32f) uniform image2D dst_img;

layout(local_size_x = 8, local_size_y = 16) in;

const uint g_block_size =
    gl_WorkGroupSize.x * gl_WorkGroupSize.y;

shared vec4 s_shared_minmax[14][g_block_size];
shared vec4 s_pack_info[14];
void main()
{
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 src_pixel_coords = pixel_coords * ivec2(8, 4);
    uint actual_block_size = params.size.x * params.size.y;
	// get index in global work group i.e x,y position
    ivec2 min_src_pixel_coords = ivec2(pixel_coords.x * 2, pixel_coords.y);
    ivec2 max_src_pixel_coords = ivec2(pixel_coords.x * 2 + 1, pixel_coords.y);
    uint local_idx = zOrder(pixel_coords.x, pixel_coords.y);

    if (local_idx < actual_block_size) {
        s_shared_minmax[0][local_idx] =
            min(imageLoad(src_img, src_pixel_coords + ivec2(0, 0)),
                imageLoad(src_img, src_pixel_coords + ivec2(4, 0)));
        s_shared_minmax[1][local_idx] =
            max(imageLoad(src_img, src_pixel_coords + ivec2(1, 0)),
                imageLoad(src_img, src_pixel_coords + ivec2(5, 0)));
        s_shared_minmax[2][local_idx] =
            min(imageLoad(src_img, src_pixel_coords + ivec2(2, 0)),
                imageLoad(src_img, src_pixel_coords + ivec2(6, 0)));
        s_shared_minmax[3][local_idx] =
            max(imageLoad(src_img, src_pixel_coords + ivec2(3, 0)),
                imageLoad(src_img, src_pixel_coords + ivec2(7, 0)));
        s_shared_minmax[4][local_idx] =
            min(imageLoad(src_img, src_pixel_coords + ivec2(0, 1)),
                imageLoad(src_img, src_pixel_coords + ivec2(4, 1)));
        s_shared_minmax[5][local_idx] =
            max(imageLoad(src_img, src_pixel_coords + ivec2(1, 1)),
                imageLoad(src_img, src_pixel_coords + ivec2(5, 1)));
        s_shared_minmax[6][local_idx] =
            min(imageLoad(src_img, src_pixel_coords + ivec2(2, 1)),
                imageLoad(src_img, src_pixel_coords + ivec2(6, 1)));
        s_shared_minmax[7][local_idx] =
            max(imageLoad(src_img, src_pixel_coords + ivec2(3, 1)),
                imageLoad(src_img, src_pixel_coords + ivec2(7, 1)));
        s_shared_minmax[8][local_idx] =
            min(imageLoad(src_img, src_pixel_coords + ivec2(0, 2)),
                imageLoad(src_img, src_pixel_coords + ivec2(4, 2)));
        s_shared_minmax[9][local_idx] =
            max(imageLoad(src_img, src_pixel_coords + ivec2(1, 2)),
                imageLoad(src_img, src_pixel_coords + ivec2(5, 2)));
        s_shared_minmax[10][local_idx] =
            min(imageLoad(src_img, src_pixel_coords + ivec2(2, 2)),
                imageLoad(src_img, src_pixel_coords + ivec2(6, 2)));
        s_shared_minmax[11][local_idx] =
            max(imageLoad(src_img, src_pixel_coords + ivec2(3, 2)),
                imageLoad(src_img, src_pixel_coords + ivec2(7, 2)));
        s_shared_minmax[12][local_idx].x =
            min(imageLoad(src_img, src_pixel_coords + ivec2(0, 3)).x,
                imageLoad(src_img, src_pixel_coords + ivec2(4, 3)).x);
        s_shared_minmax[13][local_idx].x =
            max(imageLoad(src_img, src_pixel_coords + ivec2(1, 3)).x,
                imageLoad(src_img, src_pixel_coords + ivec2(5, 3)).x);
    }
    barrier();

    // Reduce in shared memory
    for (uint stride = 1; stride < actual_block_size; stride *= 2) {
        if (local_idx % (2 * stride) == 0 && local_idx + stride < actual_block_size) {
            for (uint i = 0; i < 6; ++i) {
				s_shared_minmax[i*2][local_idx] =
                    min(s_shared_minmax[i*2][local_idx],
                        s_shared_minmax[i*2][local_idx + stride]);
				s_shared_minmax[i*2+1][local_idx] =
                    max(s_shared_minmax[i*2+1][local_idx],
                        s_shared_minmax[i*2+1][local_idx + stride]);
			}
            s_shared_minmax[12][local_idx].x =
                min(s_shared_minmax[12][local_idx].x,
                    s_shared_minmax[12][local_idx + stride].x);
            s_shared_minmax[13][local_idx].x =
                max(s_shared_minmax[13][local_idx].x,
                    s_shared_minmax[13][local_idx + stride].x);
        }
        barrier();
    }

    if (local_idx < 7) {
        vec4 min_value =
            s_shared_minmax[local_idx * 2][0] * params.range_scale;
        vec4 max_value =
            s_shared_minmax[local_idx * 2 + 1][0] * params.range_scale;
        s_pack_info[local_idx * 2] =
            min_value;
        s_pack_info[local_idx * 2 + 1] =
            max_value - min_value;
    }
    barrier();

    ivec2 dst_pixel_coords = ivec2(0);
        //ivec2(params.block_index * 4);

    if (local_idx < 14) {
        imageStore(
            dst_img,
            dst_pixel_coords + ivec2(local_idx % 4, local_idx / 4),
            s_pack_info[local_idx]);
    }
}